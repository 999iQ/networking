version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: postgresql
    hostname: networking
    restart: unless-stopped
    ports:
      - "5432:5432" # Маппинг порта для доступа извне
    environment:
      POSTGRES_DB: networking  # Имя базы данных
      POSTGRES_USER: postgres  # Имя пользователя базы данных
      POSTGRES_PASSWORD: 1234  # Пароль пользователя
    volumes:
      - postgres_data:/var/lib/postgresql/data # Создаем том для хранения данных, чтобы они не потерялись при перезапуске контейнера
    networks:
      - service-net
    # хелф-чек проверяет включенность базы данных
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  networking:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # anyway
    environment:
      # postgres
      DB_HOST: db
      DB_NAME: networking  # Имя базы данных
      DB_PORT: 5432
      DB_USER: postgres  # Имя пользователя базы данных
      DB_PASSWORD: 1234  # Пароль пользователя
      DB_SSLMODE: disable
      DB_AUTO_MIGRATE: false
      # logger
      LOG_OUTPUT: file # file or any (terminal)
      LOG_DIR: logs
    depends_on:
      db:
        condition: service_healthy  # Ждем, пока PostgreSQL не станет healthy
    restart: on-failure # перезапуск при ошибке
    networks:
      - service-net



#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    container_name: zookeeper
#    hostname: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    container_name: kafka
#    hostname: kafka
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#    depends_on:
#      - zookeeper
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    container_name: kafka-ui
#    ports:
#      - "8080:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local-kafka
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
#      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
#    depends_on:
#      - kafka

volumes:
  postgres_data:

networks:
  service-net:
    driver: bridge