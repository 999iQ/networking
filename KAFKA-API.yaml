asyncapi: 2.6.0
info:
  title: AsyncAPI микросервисного взаимодействия.
  version: version 1.0.3
  description: |
    Networking отправляет данные о мэтчинге в Chats через Kafka.

# описание кафки
servers:
  kafka-prod:
    url: kafka://kafka.example.com:9092
    protocol: kafka
    security:
      - scramSha256: []
    bindings:
      kafka:
        groupId: chat-service-group

# описание PUB/SUB топиков
channels:
  messenger/chat/management:
    publish:
      description: Топик для событий управления чатами (создание/удаление), направленными в MC messenger
      message:
        oneOf:
          - $ref: '#/components/messages/messenger.createChat'
          - $ref: '#/components/messages/messenger.deleteChat'
      bindings:
        kafka:
          partitions: 1

  messenger/chat/events:
    subscribe:
      description: Топик для получения событий, которые произошли в МС messenger
      message:
        oneOf:
          - $ref: '#/components/messages/messenger.chatCreated'


  auth/management:
    publish:
      description: Топик для управления авторизацией
      operationId: sendAccountEvent
      message:
        oneOf:
          - $ref: '#/components/messages/user.deleteSessions'

  auth/account/events:
    subscribe:
      operationId: receiveAnswerAccountEvent
      message:
        oneOf:
          - $ref: '#/components/messages/account.created'


# описание структуры топиков
components:
  messages:
    messenger.createChat:
      name: createChat
      summary: Событие создания чата
      headers:
        type: object
        properties:
          eventType:
            type: string
            enum: [CREATE_CHAT]
          eventId:
            description: id с которым в дальнейшем вернётся ответ
            type: string
            format: uuid
        required:
          - eventType
          - eventId
      payload:
        type: object
        properties:
          participants:
            type: array
            items:
              $ref: '#/components/schemas/chatParticipant'
            minItems: 2
        required:
          - participants

    messenger.chatCreated:
      name: chatCreated
      summary: Ответ на событие создания чата
      headers:
        type: object
        properties:
          eventType:
            type: string
            enum: [CREATE_CHAT]
          eventId:
            description: id с которым создавался чат
            type: string
            format: uuid
        required:
          - eventType
          - eventId
      payload:
        type: object
        properties:
          chatId:
            type: string
            format: uuid
        required:
          - participants

    messenger.deleteChat:
      name: deleteChat
      summary: Событие удаления чата
      headers:
        type: object
        properties:
          eventType:
            type: string
            enum: [CHAT_DELETED]
        required:
          - eventType
      payload:
        type: object
        properties:
          idChat:
            type: string
            format: uuid
        required:
          - id_chat

    account.created:
      name: account.created
      summary: Событие создания аккаунта
      headers:
        type: object
        properties:
          eventType:
            type: string
            enum: [ACCOUNT_CREATED]
        required:
          - eventType
      payload:
        $ref: '#/components/schemas/accountData'

    user.deleteSessions:
      name: user.deleteSessions
      summary: Событие удаления сессий аккаунта (refreshTokens)
      headers:
        type: object
        properties:
          eventType:
            type: string
            enum: [ACCOUNT_DELETED]
        required:
          - eventType
      payload:
        type: object
        properties:
          idAccount:
            type: string
            format: uuid
        required:
          - id

  # описание содержимого объектов сообщений
  schemas:
    chatParticipant:
      type: object
      properties:
        idParticipant:
          type: string
          format: uuid
        type:
          type: string
          enum: [account, project]
      required:
        - idParticipant
        - type

    accountData:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        accepted_privacy_policy:
          type: boolean
        accepted_processing_of_personal_data:
          type: boolean
      required:
        - first_name
        - last_name
        - email


  securitySchemes:
    scramSha256:
      type: scramSha256
      description: SASL/SCRAM-SHA-256 аутентификация